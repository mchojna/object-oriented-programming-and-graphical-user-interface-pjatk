import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class Strumienie {

	public static void main(String[] args) throws IOException {

		String fname = "students.txt";

			// 1
		long c = Files.lines(Paths.get(fname)).filter(s -> Integer.parseInt(s.split(" +")[2]) > 50).count();
		System.out.println(c + "\n");

			// 2
		Files.lines(
				Paths.get(fname)).
				map(s -> new Student(Pattern.compile(" +").splitAsStream(s).toArray(String[]::new))).
				filter(s -> s.getScore() > 50).
				sorted().
				map(s -> s.getGrNo() + " " + s.getName() + " " + s.getScore()).
				forEach(System.out::println);

		System.out.println();

			// 3
		Files.lines(Paths.get(fname)).
			map(s -> new Student(s.split(" +")[0],
								 s.split(" +")[1],
								 Integer.parseInt(s.split(" +")[2]))).
			collect(Collectors.groupingBy(Student::getGrNo)).
			forEach((k, v) -> System.out.println("Group " + k + " = " + v));
	}
}

class Student implements Comparable<Student> {
	private String name, grNo;
	private int score;
	public Student(String name, String grNo, int score) {
		this.name = name;
		this.grNo = grNo;
		this.score = score;
	}
	public Student(String[] st) {
		this.name = st[0];
		this.grNo = st[1];
		this.score = Integer.parseInt(st[2]);
	}
	public String getName() {
		return name;
	}

	public String getGrNo() {
		return grNo;
	}

	public int getScore() {
		return score;
	}

	@Override
	public String toString() {
		return name + "(" + grNo + ")-" + score;
	}

	@Override
	public int compareTo(Student o) {
		if (!this.getGrNo().equals(o.getGrNo()))
			return this.getGrNo().compareTo(o.getGrNo());
		else
			return this.getScore() - o.getScore();
	}
}

